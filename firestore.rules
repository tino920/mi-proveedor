rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // === USUARIOS ===
    match /users/{userId} {
      // Solo pueden leer/escribir sus propios datos
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // Permitir crear durante registro
      allow create: if request.auth != null;
    }

    // === EMPRESAS ===
    match /companies/{companyId} {
      // ESTRATEGIA SIMPLE Y ROBUSTA:
      // Permitir lectura a usuarios autenticados con límites específicos
      allow read: if request.auth != null &&
        (
          // Caso 1: Es miembro normal de la empresa
          request.auth.uid in resource.data.members ||

          // Caso 2: Query limitada para validación de código
          // (máximo 5 documentos para prevenir abuso)
          request.query.limit <= 5
        );

      // Escritura: Admins O usuarios añadiéndose como empleados
      allow write: if request.auth != null &&
        (
          // Caso 1: Es admin
          request.auth.uid in resource.data.admins ||

          // Caso 2: Se está añadiendo a sí mismo como miembro
          (request.auth.uid in request.resource.data.members &&
           !(request.auth.uid in resource.data.get('members', [])))
        );

      // Crear nueva empresa
      allow create: if request.auth != null;

      // --- SUBCOLECCIONES ---

      // Empleados
      match /employees/{employeeId} {
        allow read: if request.auth != null &&
          (request.auth.uid == employeeId ||
           request.auth.uid in get(/databases/$(database)/documents/companies/$(companyId)).data.admins);
        allow write: if request.auth != null &&
          (request.auth.uid == employeeId ||
           request.auth.uid in get(/databases/$(database)/documents/companies/$(companyId)).data.admins);
        allow create: if request.auth != null;
      }

      // Proveedores - Solo miembros pueden leer, solo admins escribir
      match /suppliers/{supplierId} {
        allow read: if request.auth != null &&
          request.auth.uid in get(/databases/$(database)/documents/companies/$(companyId)).data.members;
        allow write: if request.auth != null &&
          request.auth.uid in get(/databases/$(database)/documents/companies/$(companyId)).data.admins;
      }

      // Productos - Solo miembros pueden leer, solo admins escribir
      match /products/{productId} {
        allow read: if request.auth != null &&
          request.auth.uid in get(/databases/$(database)/documents/companies/$(companyId)).data.members;
        allow write: if request.auth != null &&
          request.auth.uid in get(/databases/$(database)/documents/companies/$(companyId)).data.admins;
      }

      // Pedidos - Lógica específica de pedidos
      match /orders/{orderId} {
        // Leer: todos los miembros
        allow read: if request.auth != null &&
          request.auth.uid in get(/databases/$(database)/documents/companies/$(companyId)).data.members;

        // Crear: todos los miembros
        allow create: if request.auth != null &&
          request.auth.uid in get(/databases/$(database)/documents/companies/$(companyId)).data.members;

        // Actualizar: empleado que creó el pedido o admins
        allow update: if request.auth != null &&
          (request.auth.uid == resource.data.employeeId ||
           request.auth.uid in get(/databases/$(database)/documents/companies/$(companyId)).data.admins);
      }
    }
  }
}