import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:package_info_plus/package_info_plus.dart';
import 'package:provider/provider.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:flutter/services.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:share_plus/share_plus.dart';
import '../../../../core/auth/auth_provider.dart';
import '../../../../core/providers/localization_provider.dart';
import '../../../../core/theme/app_theme.dart';
import '../../../../core/theme/app_gradients.dart';
import '../../../../shared/widgets/gradient_widgets.dart';
import '../../../../core/providers/ui_settings_provider.dart';
import 'company_policies_screen.dart';
import "package:mi_proveedor/generated/l10n/app_localizations.dart";

class SettingsScreen extends StatefulWidget {
  const SettingsScreen({super.key});

  @override
  State<SettingsScreen> createState() => _SettingsScreenState();
}

class _SettingsScreenState extends State<SettingsScreen> {
  // üè¢ CONTROLADORES PARA EDITAR EMPRESA
  final _companyNameController = TextEditingController();
  final _companyAddressController = TextEditingController();
  final _companyPhoneController = TextEditingController();

  // üîî CONFIGURACIONES DE NOTIFICACIONES
  bool _pushNotifications = true;
  bool _emailNotifications = true;
  bool _orderNotifications = true;
  bool _employeeNotifications = true;

  // üé® NUEVAS VARIABLES PARA PERSONALIZACI√ìN
  String _selectedTheme = 'light'; // 'light', 'dark', 'system'
  String _selectedLanguage = 'es'; // 'es', 'en'
  double _textScale = 1.0; // 0.8, 1.0, 1.2, 1.4
  bool _biometricEnabled = false;
  bool _biometricAvailable = false;

  void _checkAuthStatus() {
    final user = FirebaseAuth.instance.currentUser;
    if (user == null) {
      WidgetsBinding.instance.addPostFrameCallback((_) {
        if (mounted) {
          Navigator.of(context).pushReplacementNamed('/login');
        }
      });
    }
  }

  Future<void> _initializeUISettings() async {
    final uiSettings = context.read<UISettingsProvider>();
    await uiSettings.initialize();
  }

  @override
  void initState() {
    super.initState();
    _checkAuthStatus(); // Ahora s√≠ puede llamarla
    _loadNotificationSettings();
    _loadPersonalizationSettings(); // ‚Üê A√ëADIR ESTA L√çNEA
    _checkBiometricAvailability();  // ‚Üê A√ëADIR ESTA L√çNEA
    _initializeUISettings(); // ‚Üê Agregar esta l√≠nea
  }


  @override
  void dispose() {
    _companyNameController.dispose();
    _companyAddressController.dispose();
    _companyPhoneController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final authProvider = Provider.of<RestauAuthProvider>(context);
    final companyData = authProvider.companyData;
    final companyCode = companyData?['code'] ?? '';
    final isAdmin = authProvider.userRole == 'admin';

    return Consumer2<UISettingsProvider, LocalizationProvider>(  // ‚Üê Consumer2
      builder: (context, uiSettings, localizationProvider, child) {
        return MediaQuery(
          data: MediaQuery.of(context).copyWith(
            textScaler: TextScaler.linear(uiSettings.textScale),
          ),
          child: Container(
            decoration: BoxDecoration(
              gradient: LinearGradient(
                colors: [Color(0xFF6B73FF), Color(0xFF129793)], // ‚Üê Estos colores
              ),
            ),
      child: SafeArea(
        child: Column(
          children: [
            // üé® Header con gradiente
            _buildHeader(context),

            // üì± Contenido con fondo blanco
            Expanded(
              child: Container(
                width: double.infinity,
                decoration: const BoxDecoration(
                  color: AppTheme.backgroundColor,
                  borderRadius: BorderRadius.only(
                    topLeft: Radius.circular(30),
                    topRight: Radius.circular(30),
                  ),
                ),
                child: ListView(
                  padding: const EdgeInsets.all(20),
                  children: [
                    const SizedBox(height: 10),

                    // üè¢ Informaci√≥n de la empresa (EDITABLE)
                    if (isAdmin) ...[
                      _buildCompanyInfoSection(companyData, companyCode),
                      const SizedBox(height: 20),
                    ],
                    
                    // üîî Configuraci√≥n de Notificaciones
                    _buildNotificationsSection(),

                    const SizedBox(height: 20),

                    // üé® Secci√≥n de Apariencia
// üé® Secci√≥n de Apariencia
                    _buildAppearanceSection(uiSettings, localizationProvider),  // ‚Üê PASAR AMBOS PAR√ÅMETROS
                    const SizedBox(height: 20),

                    // üåê Secci√≥n de Personalizaci√≥n
                    _buildPersonalizationSection(),

                    const SizedBox(height: 20),

                    // üîê Seguridad y Cuenta
                    _buildSecuritySection(uiSettings),

                    const SizedBox(height: 20),

                    // üë• Gesti√≥n de Empleados (Solo Admin)
                    if (isAdmin) ...[
                      _buildEmployeeManagementSection(),
                      const SizedBox(height: 20),
                    ],

                    // üÜò Ayuda y Soporte
                    _buildHelpSupportSection(),

                    const SizedBox(height: 20),

                    // ‚ÑπÔ∏è Informaci√≥n de la App
                    _buildAppInfoSection(),

                    const SizedBox(height: 30),

                    // üö™ Bot√≥n cerrar sesi√≥n
                    _buildLogoutButton(authProvider),

                    const SizedBox(height: 20),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
        ),
      );
      },
    );
  }

  // üì± HEADER DE LA PANTALLA
  Widget _buildHeader(BuildContext context) {
    return Container(
      padding: const EdgeInsets.all(20),
      child: Row(
        children: [
          Container(
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: Colors.white.withOpacity(0.2),
              borderRadius: BorderRadius.circular(16),
            ),
            child: const Icon(
              Icons.settings,
              color: Colors.white,
              size: 28,
            ),
          ),
          const SizedBox(width: 16),
          // ‚úÖ CORRECTO - Quitar const
          Expanded(  // ‚Üê SIN const
            child: Text(
              AppLocalizations.of(context).settings,  // ‚Üê Import directo
              style: TextStyle(
                color: Colors.white,
                fontSize: 24,
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
          // Bot√≥n de ayuda r√°pida
          IconButton(
            onPressed: () => _showHelpDialog(context),
            icon: const Icon(
              Icons.help_outline,
              color: Colors.white,
              size: 24,
            ),
          ),
        ],
      ),
    );
  }

  // üè¢ SECCI√ìN DE INFORMACI√ìN DE EMPRESA (EDITABLE)
  Widget _buildCompanyInfoSection(Map<String, dynamic>? companyData,
      String companyCode) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 10,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        children: [
          Container(
            padding: const EdgeInsets.all(20),
            decoration: const BoxDecoration(
              gradient: AppGradients.primaryGradient,
              borderRadius: BorderRadius.only(
                topLeft: Radius.circular(16),
                topRight: Radius.circular(16),
              ),
            ),
            child: Row(
              children: [
                const Icon(Icons.business, color: Colors.white),
                const SizedBox(width: 12),
                const Expanded(
                  child: Text(
                    'Informaci√≥n de la Empresa',
                    style: TextStyle(
                      color: Colors.white,
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ),
                IconButton(
                  onPressed: () => _editCompanyInfo(companyData),
                  icon: const Icon(Icons.edit, color: Colors.white),
                ),
              ],
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(20),
            child: Column(
              children: [
                _buildInfoRow(
                    'Nombre', companyData?['name'] ?? '', Icons.store),
                const SizedBox(height: 12),
                _buildInfoRow('C√≥digo', companyCode, Icons.qr_code),
                const SizedBox(height: 12),
                _buildInfoRow('Direcci√≥n', companyData?['address'] ?? '',
                    Icons.location_on),
                const SizedBox(height: 12),
                _buildInfoRow(
                    'Tel√©fono', companyData?['phone'] ?? '', Icons.phone),
                const SizedBox(height: 16),

                // Bot√≥n para compartir c√≥digo de empresa
                SizedBox(
                  width: double.infinity,
                  child: ElevatedButton.icon(
                    onPressed: () =>
                        _shareCompanyCode(companyCode, companyData),
                    icon: const Icon(Icons.share),
                    label: const Text('Compartir C√≥digo de Empresa'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: AppTheme.primaryColor,
                      foregroundColor: Colors.white,
                      padding: const EdgeInsets.symmetric(vertical: 12),
                    ),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  // üîî SECCI√ìN DE NOTIFICACIONES
  Widget _buildNotificationsSection() {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 10,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        children: [
          Container(
            padding: const EdgeInsets.all(20),
            decoration: const BoxDecoration(
              gradient: AppGradients.primaryGradient,
              borderRadius: BorderRadius.only(
                topLeft: Radius.circular(16),
                topRight: Radius.circular(16),
              ),
            ),
            child: const Row(
              children: [
                Icon(Icons.notifications, color: Colors.white),
                SizedBox(width: 12),
                Text(
                  'Configuraci√≥n de Notificaciones',
                  style: TextStyle(
                    color: Colors.white,
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ],
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(20),
            child: Column(
              children: [
                _buildNotificationSwitch(
                  'Notificaciones Push',
                  'Recibir notificaciones en el dispositivo',
                  Icons.notifications_active,
                  _pushNotifications,
                      (value) => setState(() => _pushNotifications = value),
                ),
                const Divider(),
                _buildNotificationSwitch(
                  'Notificaciones por Email',
                  'Recibir notificaciones por correo electr√≥nico',
                  Icons.email,
                  _emailNotifications,
                      (value) => setState(() => _emailNotifications = value),
                ),
                const Divider(),
                _buildNotificationSwitch(
                  'Notificaciones de Pedidos',
                  'Alertas sobre nuevos pedidos y cambios de estado',
                  Icons.receipt_long,
                  _orderNotifications,
                      (value) => setState(() => _orderNotifications = value),
                ),
                const Divider(),
                _buildNotificationSwitch(
                  'Notificaciones de Empleados',
                  'Alertas sobre actividad de empleados',
                  Icons.people,
                  _employeeNotifications,
                      (value) => setState(() => _employeeNotifications = value),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  // üîê SECCI√ìN DE SEGURIDAD PERSONAL (FUNCIONAL)
  Widget _buildSecuritySection(UISettingsProvider uiSettings) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 10,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        children: [
          _buildSettingsItem(
            Icons.lock,
            'Cambiar Contrase√±a',
            'Actualizar tu contrase√±a de acceso',
                () => _changePassword(),
          ),
          const Divider(height: 1),
          _buildSettingsItem(
            Icons.security,
            'Configuraci√≥n de Seguridad',
            'Gestionar opciones de seguridad',
                () => _showSecurityOptions(),
          ),
          const Divider(height: 1),
          _buildSettingsItem(
            Icons.backup,
            'Copia de Seguridad',
            'Realizar backup de tus datos',
                () => _createBackup(),
          ),
          const Divider(height: 1),
          _buildSettingsItem(  // ‚Üê Agregar este item
            Icons.fingerprint,
            'Autenticaci√≥n Biom√©trica',
            uiSettings.biometricStatusText,
            () => _showBiometricOptions(uiSettings),
          ),
        ],
      ),
    );
  }

  // üë• SECCI√ìN DE GESTI√ìN DE EMPLEADOS (Solo Admin)
  Widget _buildEmployeeManagementSection() {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 10,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        children: [
          Container(
            padding: const EdgeInsets.all(20),
            decoration: const BoxDecoration(
              gradient: AppGradients.primaryGradient,
              borderRadius: BorderRadius.only(
                topLeft: Radius.circular(16),
                topRight: Radius.circular(16),
              ),
            ),
            child: const Row(
              children: [
                Icon(Icons.admin_panel_settings, color: Colors.white),
                SizedBox(width: 12),
                Text(
                  'Gesti√≥n de Empleados',
                  style: TextStyle(
                    color: Colors.white,
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ],
            ),
          ),
          Column(
            children: [
              _buildSettingsItem(
                Icons.group_add,
                'L√≠mites de Empleados',
                'Configurar l√≠mites de pedidos por empleado',
                    () => _configureEmployeeLimits(),
              ),
              const Divider(height: 1),
              _buildSettingsItem(
                Icons.rule,
                'Pol√≠ticas de Empresa',
                'Definir reglas y pol√≠ticas internas',
                    () => _configureCompanyPolicies(),
              ),
              const Divider(height: 1),
              _buildSettingsItem(
                Icons.analytics,
                'Reportes de Actividad',
                'Ver estad√≠sticas de empleados',
                    () => _showEmployeeReports(),
              ),
            ],
          ),
        ],
      ),
    );
  }

  // üÜò SECCI√ìN DE AYUDA Y SOPORTE
  Widget _buildHelpSupportSection() {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 10,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        children: [
          _buildSettingsItem(
            Icons.help_center,
            'Centro de Ayuda',
            'Preguntas frecuentes y tutoriales',
                () => _openHelpCenter(),
          ),
          const Divider(height: 1),
          _buildSettingsItem(
            Icons.support_agent,
            'Contactar Soporte',
            'Obtener ayuda directa de nuestro equipo',
                () => _contactSupport(),
          ),
          const Divider(height: 1),
          _buildSettingsItem(
            Icons.feedback,
            'Enviar Comentarios',
            'Comparte tu experiencia y sugerencias',
                () => _sendFeedback(),
          ),
        ],
      ),
    );
  }

  // ‚ÑπÔ∏è SECCI√ìN DE INFORMACI√ìN DE LA APP
  Widget _buildAppInfoSection() {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 10,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        children: [
          _buildSettingsItem(
            Icons.info,
            'Acerca de MiProveedor',
            'Informaci√≥n sobre la aplicaci√≥n',
                () => _showAboutDialog(),
          ),
          const Divider(height: 1),
          _buildSettingsItem(
            Icons.article,
            'T√©rminos y Condiciones',
            'Lee nuestros t√©rminos de servicio',
                () => _showTermsAndConditions(),
          ),
          const Divider(height: 1),
          _buildSettingsItem(
            Icons.privacy_tip,
            'Pol√≠tica de Privacidad',
            'Conoce c√≥mo protegemos tus datos',
                () => _showPrivacyPolicy(),
          ),
          const Divider(height: 1),
          _buildSettingsItem(
            Icons.star_rate,
            'Calificar App',
            'Ay√∫danos calificando la aplicaci√≥n',
                () => _rateApp(),
          ),
        ],
      ),
    );
  }

  // üö™ BOT√ìN DE CERRAR SESI√ìN
  Widget _buildLogoutButton(RestauAuthProvider authProvider) {
    return GradientButton(
      text: 'Cerrar Sesi√≥n',
      icon: Icons.logout,
      onPressed: () => _showLogoutConfirmation(context, authProvider),
      gradient: const LinearGradient(
        colors: [Color(0xFFFF6B6B), Color(0xFFFF8E53)],
      ),
    );
  }

  // üîß WIDGETS AUXILIARES
  Widget _buildInfoRow(String label, String value, IconData icon) {
    return Row(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Container(
          padding: const EdgeInsets.all(8),
          decoration: BoxDecoration(
            gradient: AppGradients.primaryGradient,
            borderRadius: BorderRadius.circular(8),
          ),
          child: Icon(icon, color: Colors.white, size: 16),
        ),
        const SizedBox(width: 12),
        Expanded(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                label,
                style: const TextStyle(
                  fontSize: 12,
                  color: AppTheme.secondaryTextColor,
                  fontWeight: FontWeight.w500,
                ),
              ),
              const SizedBox(height: 2),
              Text(
                value.isNotEmpty ? value : 'No configurado',
                style: TextStyle(
                  fontSize: 14,
                  color: value.isNotEmpty ? AppTheme.textColor : AppTheme
                      .secondaryTextColor,
                  fontWeight: FontWeight.w600,
                ),
              ),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildNotificationSwitch(String title,
      String subtitle,
      IconData icon,
      bool value,
      Function(bool) onChanged,) {
    return Row(
      children: [
        Container(
          padding: const EdgeInsets.all(8),
          decoration: BoxDecoration(
            gradient: AppGradients.primaryGradient,
            borderRadius: BorderRadius.circular(8),
          ),
          child: Icon(icon, color: Colors.white, size: 20),
        ),
        const SizedBox(width: 16),
        Expanded(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                title,
                style: const TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.w600,
                ),
              ),
              Text(
                subtitle,
                style: const TextStyle(
                  fontSize: 12,
                  color: AppTheme.secondaryTextColor,
                ),
              ),
            ],
          ),
        ),
        Switch(
          value: value,
          onChanged: (newValue) {
            onChanged(newValue);
            _saveNotificationSettings();
          },
          activeColor: AppTheme.primaryColor,
        ),
      ],
    );
  }

  Widget _buildSettingsItem(IconData icon, String title, String subtitle,
      VoidCallback onTap) {
    return ListTile(
      leading: Container(
        padding: const EdgeInsets.all(8),
        decoration: BoxDecoration(
          gradient: AppGradients.primaryGradient,
          borderRadius: BorderRadius.circular(8),
        ),
        child: Icon(icon, color: Colors.white, size: 20),
      ),
      title: Text(
        title,
        style: const TextStyle(
          fontWeight: FontWeight.w600,
        ),
      ),
      subtitle: Text(
        subtitle,
        style: const TextStyle(
          fontSize: 12,
          color: AppTheme.secondaryTextColor,
        ),
      ),
      trailing: const Icon(Icons.arrow_forward_ios, size: 16),
      onTap: onTap,
    );
  }

  // üì± FUNCIONES DE FUNCIONALIDAD

  // üîß Editar informaci√≥n de empresa
  void _editCompanyInfo(Map<String, dynamic>? companyData) {
    _companyNameController.text = companyData?['name'] ?? '';
    _companyAddressController.text = companyData?['address'] ?? '';
    _companyPhoneController.text = companyData?['phone'] ?? '';

    showDialog(
      context: context,
      builder: (context) =>
          AlertDialog(
            title: const Text('Editar Informaci√≥n de Empresa'),
            content: SingleChildScrollView(
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  TextField(
                    controller: _companyNameController,
                    decoration: const InputDecoration(
                      labelText: 'Nombre de la empresa',
                      border: OutlineInputBorder(),
                    ),
                  ),
                  const SizedBox(height: 16),
                  TextField(
                    controller: _companyAddressController,
                    decoration: const InputDecoration(
                      labelText: 'Direcci√≥n',
                      border: OutlineInputBorder(),
                    ),
                    maxLines: 2,
                  ),
                  const SizedBox(height: 16),
                  TextField(
                    controller: _companyPhoneController,
                    decoration: const InputDecoration(
                      labelText: 'Tel√©fono',
                      border: OutlineInputBorder(),
                    ),
                    keyboardType: TextInputType.phone,
                  ),
                ],
              ),
            ),
            actions: [
              TextButton(
                onPressed: () => Navigator.pop(context),
                child: const Text('Cancelar'),
              ),
              ElevatedButton(
                onPressed: () => _saveCompanyInfo(),
                child: const Text('Guardar'),
              ),
            ],
          ),
    );
  }

  // üíæ Guardar informaci√≥n de empresa
  Future<void> _saveCompanyInfo() async {
    try {
      final authProvider = context.read<RestauAuthProvider>();
      final companyId = authProvider.companyId;

      if (companyId != null) {
        await FirebaseFirestore.instance
            .collection('companies')
            .doc(companyId)
            .update({
          'name': _companyNameController.text.trim(),
          'address': _companyAddressController.text.trim(),
          'phone': _companyPhoneController.text.trim(),
          'updatedAt': FieldValue.serverTimestamp(),
        });

        // Actualizar datos locales
        await authProvider.refreshUserData();

        if (mounted) {
          Navigator.pop(context);
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('‚úÖ Informaci√≥n actualizada correctamente'),
              backgroundColor: AppTheme.successColor,
            ),
          );
        }
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('‚ùå Error al actualizar: $e'),
            backgroundColor: AppTheme.errorColor,
          ),
        );
      }
    }
  }

  // üì§ Compartir c√≥digo de empresa
  void _shareCompanyCode(String companyCode,
      Map<String, dynamic>? companyData) {
    final message = '''
¬°√önete a nuestro equipo en MiProveedor!

üè¢ Empresa: ${companyData?['name'] ?? 'Mi Empresa'}
üîë C√≥digo: $companyCode

üì± Pasos para registrarte:
1. Descarga MiProveedor
2. Selecciona "Empleado" 
3. Introduce el c√≥digo: $companyCode
4. Completa tu registro

¬°Esperamos trabajar contigo! üöÄ
''';

    showDialog(
      context: context,
      builder: (context) =>
          AlertDialog(
            title: const Text('C√≥digo de Empresa'),
            content: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                Container(
                  padding: const EdgeInsets.all(20),
                  decoration: BoxDecoration(
                    gradient: AppGradients.primaryGradient,
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: Text(
                    companyCode,
                    style: const TextStyle(
                      color: Colors.white,
                      fontSize: 24,
                      fontWeight: FontWeight.bold,
                      letterSpacing: 2,
                    ),
                  ),
                ),
                const SizedBox(height: 16),
                const Text(
                  'Comparte este c√≥digo con tus empleados para que puedan registrarse en la app.',
                  textAlign: TextAlign.center,
                ),
              ],
            ),
            actions: [
              TextButton(
                onPressed: () => Navigator.pop(context),
                child: const Text('Cerrar'),
              ),
              ElevatedButton.icon(
                onPressed: () {
                  Navigator.pop(context);
                  Clipboard.setData(ClipboardData(text: companyCode));
                  _showSuccessSnackBar('üìã C√≥digo copiado al portapapeles');
                },
                icon: const Icon(Icons.copy),
                label: const Text('Copiar'),
              ),
              ElevatedButton.icon(
                onPressed: () {
                  Navigator.pop(context);
                  Share.share(message, subject: 'Invitaci√≥n a MiProveedor');
                },
                icon: const Icon(Icons.share),
                label: const Text('Compartir'),
              ),
            ],
          ),
    );
  }

  // üîê Cambiar contrase√±a
  void _changePassword() {
    final currentPasswordController = TextEditingController();
    final newPasswordController = TextEditingController();
    final confirmPasswordController = TextEditingController();

    showDialog(
      context: context,
      builder: (context) =>
          AlertDialog(
            title: const Text('Cambiar Contrase√±a'),
            content: SingleChildScrollView(
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  TextField(
                    controller: currentPasswordController,
                    decoration: const InputDecoration(
                      labelText: 'Contrase√±a actual',
                      border: OutlineInputBorder(),
                    ),
                    obscureText: true,
                  ),
                  const SizedBox(height: 16),
                  TextField(
                    controller: newPasswordController,
                    decoration: const InputDecoration(
                      labelText: 'Nueva contrase√±a',
                      border: OutlineInputBorder(),
                    ),
                    obscureText: true,
                  ),
                  const SizedBox(height: 16),
                  TextField(
                    controller: confirmPasswordController,
                    decoration: const InputDecoration(
                      labelText: 'Confirmar nueva contrase√±a',
                      border: OutlineInputBorder(),
                    ),
                    obscureText: true,
                  ),
                ],
              ),
            ),
            actions: [
              TextButton(
                onPressed: () => Navigator.pop(context),
                child: const Text('Cancelar'),
              ),
              ElevatedButton(
                onPressed: () =>
                    _updatePassword(
                      currentPasswordController.text,
                      newPasswordController.text,
                      confirmPasswordController.text,
                    ),
                child: const Text('Cambiar'),
              ),
            ],
          ),
    );
  }

  // üîÑ Actualizar contrase√±a
  Future<void> _updatePassword(String current, String newPassword,
      String confirm) async {
    if (newPassword != confirm) {
      _showErrorSnackBar('‚ùå Las contrase√±as no coinciden');
      return;
    }

    if (newPassword.length < 6) {
      _showErrorSnackBar('‚ùå La contrase√±a debe tener al menos 6 caracteres');
      return;
    }

    try {
      final user = FirebaseAuth.instance.currentUser;
      if (user?.email == null) {
        _showErrorSnackBar('‚ùå Usuario no v√°lido');
        return;
      }

      // Mostrar loading
      showDialog(
        context: context,
        barrierDismissible: false,
        builder: (context) => const Center(child: CircularProgressIndicator()),
      );

      // Re-autenticar con contrase√±a actual
      final credential = EmailAuthProvider.credential(
        email: user!.email!,
        password: current,
      );

      await user.reauthenticateWithCredential(credential);

      // Cambiar contrase√±a
      await user.updatePassword(newPassword);

      // Cerrar loading
      if (mounted) Navigator.pop(context);

      // Cerrar di√°logo de cambio
      if (mounted) Navigator.pop(context);

      // Mostrar √©xito SIN logout
      if (mounted) {
        _showSuccessSnackBar('‚úÖ Contrase√±a actualizada correctamente');
      }
    } catch (e) {
      // Cerrar loading si est√° abierto
      if (mounted) Navigator.pop(context);

      String errorMessage = '‚ùå Error al cambiar contrase√±a';

      if (e.toString().contains('wrong-password')) {
        errorMessage = '‚ùå Contrase√±a actual incorrecta';
      } else if (e.toString().contains('weak-password')) {
        errorMessage = '‚ùå La nueva contrase√±a es muy d√©bil';
      }

      if (mounted) {
        _showErrorSnackBar(errorMessage);
      }
    }
  }

  // üé® SECCI√ìN DE APARIENCIA (FUNCIONAL) - VERSI√ìN CORREGIDA
  Widget _buildAppearanceSection(UISettingsProvider uiSettings, LocalizationProvider localizationProvider) {  // ‚Üê A√ëADIR PAR√ÅMETRO
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 10,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        children: [
          Container(
            padding: const EdgeInsets.all(20),
            decoration: const BoxDecoration(
              gradient: AppGradients.primaryGradient,
              borderRadius: BorderRadius.only(
                topLeft: Radius.circular(16),
                topRight: Radius.circular(16),
              ),
            ),
            child: Row(
              children: [
                const Icon(Icons.palette, color: Colors.white),
                const SizedBox(width: 12),
                Text(
                  AppLocalizations.of(context).appearance,  // ‚Üê Ahora usar√° traducci√≥n
                  style: const TextStyle(
                    color: Colors.white,
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ],
            ),
          ),
          Column(
            children: [
              _buildSettingsItem(
                Icons.language,
                AppLocalizations.of(context).language,  // ‚Üê Ahora usar√° traducci√≥n
                localizationProvider.currentLanguageName,
                    () => _showLanguageDialog(),
              ),

              
              const Divider(height: 1),  // ‚Üê A√ëADE ESTE DIVIDER
              _buildSettingsItem(
                Icons.text_fields,
                AppLocalizations.of(context).textSize,  // ‚Üê Ahora usar√° traducci√≥n
                uiSettings.textSizeDisplayName,
                    () => _showTextSizeDialog(uiSettings),
              ),
            ],
          ),
        ],
      ),
    );
  }

// üåê SECCI√ìN DE PERSONALIZACI√ìN
  Widget _buildPersonalizationSection() {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 10,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        children: [
          Container(
            padding: const EdgeInsets.all(20),
            decoration: const BoxDecoration(
              gradient: AppGradients.primaryGradient,
              borderRadius: BorderRadius.only(
                topLeft: Radius.circular(16),
                topRight: Radius.circular(16),
              ),
            ),
            child: const Row(
              children: [
                Icon(Icons.tune, color: Colors.white),
                SizedBox(width: 12),
                Text(
                  'Personalizaci√≥n',
                  style: TextStyle(
                    color: Colors.white,
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ],
            ),
          ),
          Column(
            children: [

            ],
          ),
        ],
      ),
    );
  }



  Widget _buildThemeOption(String title, String value, IconData icon, Color color) {
    final isSelected = _selectedTheme == value;

    return GestureDetector(
      onTap: () => _changeTheme(value),
      child: Container(
        padding: const EdgeInsets.all(12),
        decoration: BoxDecoration(
          color: isSelected ? color.withOpacity(0.1) : Colors.grey.withOpacity(0.05),
          borderRadius: BorderRadius.circular(12),
          border: Border.all(
            color: isSelected ? color : Colors.grey.withOpacity(0.2),
            width: isSelected ? 2 : 1,
          ),
        ),
        child: Column(
          children: [
            Icon(
              icon,
              color: isSelected ? color : Colors.grey,
              size: 24,
            ),
            const SizedBox(height: 8),
            Text(
              title,
              style: TextStyle(
                fontSize: 12,
                fontWeight: isSelected ? FontWeight.w600 : FontWeight.normal,
                color: isSelected ? color : Colors.grey,
              ),
            ),
          ],
        ),
      ),
    );
  }


// üîß FUNCIONES DE FUNCIONALIDAD

// Cargar configuraciones de personalizaci√≥n
  Future<void> _loadPersonalizationSettings() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      setState(() {
        _selectedTheme = prefs.getString('theme') ?? 'light';
        _selectedLanguage = prefs.getString('language') ?? 'es';
        _textScale = prefs.getDouble('text_scale') ?? 1.0;
        _biometricEnabled = prefs.getBool('biometric_enabled') ?? false;
      });
    } catch (e) {
      debugPrint('Error loading personalization settings: $e');
    }
  }

// Verificar disponibilidad biom√©trica
  Future<void> _checkBiometricAvailability() async {
    try {
      // Simular verificaci√≥n biom√©trica (reemplazar con local_auth)
      setState(() {
        _biometricAvailable = true; // Cambiar seg√∫n disponibilidad real
      });
    } catch (e) {
      setState(() {
        _biometricAvailable = false;
      });
    }
  }

// Cambiar tema
  Future<void> _changeTheme(String theme) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setString('theme', theme);

      setState(() {
        _selectedTheme = theme;
      });

      _showSuccessSnackBar('üé® Tema cambiado a ${_getThemeLabel(theme)}');

      // Aqu√≠ implementar√≠as el cambio real del tema
      // Por ejemplo, con un ThemeProvider

    } catch (e) {
      _showErrorSnackBar('Error al cambiar tema: $e');
    }
  }

  String _getThemeLabel(String theme) {
    switch (theme) {
      case 'light': return 'Claro';
      case 'dark': return 'Oscuro';
      case 'system': return 'Sistema';
      default: return 'Claro';
    }
  }



// Cambiar idioma
  Future<void> _changeLanguage(String language) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setString('language', language);

      setState(() {
        _selectedLanguage = language;
      });

      _showSuccessSnackBar('üåê Idioma cambiado a ${language == 'es' ? 'Espa√±ol' : 'English'}');

      // Aqu√≠ implementar√≠as el cambio real del idioma
      // Por ejemplo, con intl o easy_localization

    } catch (e) {
      _showErrorSnackBar('Error al cambiar idioma: $e');
    }
  }


// Cambiar tama√±o de texto
  Future<void> _changeTextSize(double scale) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setDouble('text_scale', scale);

      setState(() {
        _textScale = scale;
      });

      _showSuccessSnackBar('üìù Tama√±o de texto cambiado');

      // Aqu√≠ implementar√≠as el cambio real del tama√±o
      // Por ejemplo, con MediaQuery.textScaleFactorOf

    } catch (e) {
      _showErrorSnackBar('Error al cambiar tama√±o de texto: $e');
    }
  }

  String _getTextSizeLabel() {
    switch (_textScale) {
      case 0.8: return 'Peque√±o';
      case 1.0: return 'Normal';
      case 1.2: return 'Grande';
      case 1.4: return 'Muy Grande';
      default: return 'Normal';
    }
  }

// Alternar biom√©trica
  Future<void> _toggleBiometric(bool value) async {
    try {
      if (value) {
        // Aqu√≠ implementar√≠as la autenticaci√≥n biom√©trica real
        // usando local_auth package
        _showSuccessSnackBar('üîê Autenticaci√≥n biom√©trica activada');
      } else {
        _showSuccessSnackBar('üîì Autenticaci√≥n biom√©trica desactivada');
      }

      final prefs = await SharedPreferences.getInstance();
      await prefs.setBool('biometric_enabled', value);

      setState(() {
        _biometricEnabled = value;
      });

    } catch (e) {
      _showErrorSnackBar('Error al configurar biom√©trica: $e');
    }
  }

  // üîí Mostrar opciones de seguridad
  void _showSecurityOptions() {
    showDialog(
      context: context,
      builder: (context) =>
          AlertDialog(
            title: const Text('Configuraci√≥n de Seguridad'),
            content: const Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text('üîê Tu cuenta est√° protegida con:'),
                SizedBox(height: 12),
                Text('‚Ä¢ Autenticaci√≥n por email y contrase√±a'),
                Text('‚Ä¢ Encriptaci√≥n de datos en tr√°nsito'),
                Text('‚Ä¢ Sesiones con tiempo de expiraci√≥n'),
                Text('‚Ä¢ Separaci√≥n de datos por empresa'),
                SizedBox(height: 16),
                Text('‚úÖ Tu informaci√≥n est√° segura'),
              ],
            ),
            actions: [
              ElevatedButton(
                onPressed: () => Navigator.pop(context),
                child: const Text('Entendido'),
              ),
            ],
          ),
    );
  }

  // üíæ Crear backup
  void _createBackup() {
    showDialog(
      context: context,
      builder: (context) =>
          AlertDialog(
            title: const Text('Copia de Seguridad'),
            content: const Text(
              'Tus datos se respaldan autom√°ticamente en la nube de forma segura. '
                  'No necesitas realizar ninguna acci√≥n adicional.',
            ),
            actions: [
              ElevatedButton(
                onPressed: () => Navigator.pop(context),
                child: const Text('Entendido'),
              ),
            ],
          ),
    );
  }

  // üë• Configurar l√≠mites de empleados
  void _configureEmployeeLimits() {
    final maxOrderController = TextEditingController();
    final monthlyLimitController = TextEditingController();

    // Cargar valores actuales del provider
    final authProvider = context.read<RestauAuthProvider>();
    final settings = authProvider.companyData?['settings'] ?? {};
    maxOrderController.text = (settings['maxOrderAmount'] ?? 500.0).toString();
    monthlyLimitController.text =
        (settings['monthlyLimitPerEmployee'] ?? 2000.0).toString();

    showDialog(
      context: context,
      builder: (context) =>
          AlertDialog(
            title: const Text('L√≠mites de Empleados'),
            content: SingleChildScrollView(
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  TextField(
                    controller: maxOrderController,
                    decoration: const InputDecoration(
                      labelText: 'L√≠mite por pedido (‚Ç¨)',
                      border: OutlineInputBorder(),
                    ),
                    keyboardType: TextInputType.number,
                  ),
                  const SizedBox(height: 16),
                  TextField(
                    controller: monthlyLimitController,
                    decoration: const InputDecoration(
                      labelText: 'L√≠mite mensual por empleado (‚Ç¨)',
                      border: OutlineInputBorder(),
                    ),
                    keyboardType: TextInputType.number,
                  ),
                ],
              ),
            ),
            actions: [
              TextButton(
                onPressed: () => Navigator.pop(context),
                child: const Text('Cancelar'),
              ),
              ElevatedButton(
                onPressed: () =>
                    _saveEmployeeLimits(
                      double.tryParse(maxOrderController.text) ?? 500.0,
                      double.tryParse(monthlyLimitController.text) ?? 2000.0,
                    ),
                child: const Text('Guardar'),
              ),
            ],
          ),
    );
  }

  // üíæ Guardar l√≠mites de empleados
  Future<void> _saveEmployeeLimits(double maxOrder, double monthlyLimit) async {
    try {
      final authProvider = context.read<RestauAuthProvider>();
      final companyId = authProvider.companyId;

      if (companyId != null) {
        await FirebaseFirestore.instance
            .collection('companies')
            .doc(companyId)
            .update({
          'settings.maxOrderAmount': maxOrder,
          'settings.monthlyLimitPerEmployee': monthlyLimit,
          'settings.employeeOrderLimits': true,
          'updatedAt': FieldValue.serverTimestamp(),
        });

        // Actualizar datos locales
        await authProvider.refreshUserData();

        if (mounted) {
          Navigator.pop(context);
          _showSuccessSnackBar('‚úÖ L√≠mites de empleados actualizados');
        }
      }
    } catch (e) {
      if (mounted) {
        _showErrorSnackBar('‚ùå Error al actualizar l√≠mites: $e');
      }
    }
  }

  // üìã Configurar pol√≠ticas de empresa - VERSI√ìN FUNCIONAL
  void _configureCompanyPolicies() {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => const CompanyPoliciesScreen(),
      ),
    );
  }

  // üìä Mostrar reportes de empleados
  void _showEmployeeReports() {
    showDialog(
      context: context,
      builder: (context) =>
          AlertDialog(
            title: const Text('Reportes de Actividad'),
            content: const SingleChildScrollView(
              child: Column(
                mainAxisSize: MainAxisSize.min,
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    'Resumen de Actividad',
                    style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16),
                  ),
                  SizedBox(height: 16),
                  Text('üë• Empleados activos: En desarrollo'),
                  Text('üìù Pedidos este mes: En desarrollo'),
                  Text('üí∞ Gasto mensual: En desarrollo'),
                  Text('üèÜ Empleado m√°s activo: En desarrollo'),
                  SizedBox(height: 16),
                  Text(
                    'Los reportes detallados estar√°n disponibles en una pr√≥xima actualizaci√≥n.',
                    style: TextStyle(
                        fontSize: 12, color: AppTheme.secondaryTextColor),
                  ),
                ],
              ),
            ),
            actions: [
              ElevatedButton(
                onPressed: () => Navigator.pop(context),
                child: const Text('Cerrar'),
              ),
            ],
          ),
    );
  }

  // üÜò Abrir centro de ayuda
  void _openHelpCenter() {
    showDialog(
      context: context,
      builder: (context) =>
          AlertDialog(
            title: const Text('Centro de Ayuda'),
            content: const SingleChildScrollView(
              child: Column(
                mainAxisSize: MainAxisSize.min,
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text('‚ùì Preguntas Frecuentes:',
                      style: TextStyle(fontWeight: FontWeight.bold)),
                  SizedBox(height: 8),
                  Text('‚Ä¢ ¬øC√≥mo a√±adir un nuevo proveedor?'),
                  Text('‚Ä¢ ¬øC√≥mo importar productos desde Excel?'),
                  Text('‚Ä¢ ¬øC√≥mo aprobar pedidos de empleados?'),
                  Text('‚Ä¢ ¬øC√≥mo generar PDFs de pedidos?'),
                  SizedBox(height: 16),
                  Text('üí° Consejos:',
                      style: TextStyle(fontWeight: FontWeight.bold)),
                  SizedBox(height: 8),
                  Text('‚Ä¢ Mant√©n actualizada la informaci√≥n de proveedores'),
                  Text('‚Ä¢ Configura l√≠mites apropiados para empleados'),
                  Text('‚Ä¢ Revisa regularmente los pedidos pendientes'),
                ],
              ),
            ),
            actions: [
              ElevatedButton(
                onPressed: () => Navigator.pop(context),
                child: const Text('Cerrar'),
              ),
            ],
          ),
    );
  }

  // üìû Contactar soporte
  void _contactSupport() {
    showDialog(
      context: context,
      builder: (context) =>
          AlertDialog(
            title: const Text('Contactar Soporte'),
            content: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                const Text('¬øNecesitas ayuda? Cont√°ctanos:'),
                const SizedBox(height: 16),
                ListTile(
                  leading: const Icon(
                      Icons.email, color: AppTheme.primaryColor),
                  title: const Text('Email'),
                  subtitle: const Text('soporte@restau-pedidos.com'),
                  onTap: () => _launchEmail('soporte@restau-pedidos.com'),
                ),
                ListTile(
                  leading: const Icon(
                      Icons.phone, color: AppTheme.primaryColor),
                  title: const Text('Tel√©fono'),
                  subtitle: const Text('+34 900 123 456'),
                  onTap: () => _launchPhone('+34900123456'),
                ),
                ListTile(
                  leading: const Icon(Icons.chat, color: AppTheme.primaryColor),
                  title: const Text('WhatsApp'),
                  subtitle: const Text('Chat directo'),
                  onTap: () => _launchWhatsApp('+34900123456'),
                ),
              ],
            ),
            actions: [
              TextButton(
                onPressed: () => Navigator.pop(context),
                child: const Text('Cerrar'),
              ),
            ],
          ),
    );
  }

  // üåê Funciones para abrir enlaces externos
  Future<void> _launchEmail(String email) async {
    final Uri emailUri = Uri(
      scheme: 'mailto',
      path: email,
      query: 'subject=Soporte MiProveedor&body=Describe tu consulta aqu√≠...',
    );

    if (await canLaunchUrl(emailUri)) {
      await launchUrl(emailUri);
    } else {
      _showErrorSnackBar('No se pudo abrir el cliente de email');
    }
  }

  Future<void> _launchPhone(String phone) async {
    final Uri phoneUri = Uri(scheme: 'tel', path: phone);

    if (await canLaunchUrl(phoneUri)) {
      await launchUrl(phoneUri);
    } else {
      _showErrorSnackBar('No se pudo abrir el marcador');
    }
  }

  Future<void> _launchWhatsApp(String phone) async {
    final Uri whatsappUri = Uri.parse(
        'https://wa.me/$phone?text=Hola, necesito ayuda con MiProveedor');

    if (await canLaunchUrl(whatsappUri)) {
      await launchUrl(whatsappUri);
    } else {
      _showErrorSnackBar('No se pudo abrir WhatsApp');
    }
  }

  // üí¨ Enviar comentarios
  void _sendFeedback() {
    final feedbackController = TextEditingController();

    showDialog(
      context: context,
      builder: (context) =>
          AlertDialog(
            title: const Text('Enviar Comentarios'),
            content: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                const Text('Nos encantar√≠a conocer tu experiencia:'),
                const SizedBox(height: 16),
                TextField(
                  controller: feedbackController,
                  decoration: const InputDecoration(
                    hintText: 'Escribe tus comentarios aqu√≠...',
                    border: OutlineInputBorder(),
                  ),
                  maxLines: 4,
                ),
              ],
            ),
            actions: [
              TextButton(
                onPressed: () => Navigator.pop(context),
                child: const Text('Cancelar'),
              ),
              ElevatedButton(
                onPressed: () => _submitFeedback(feedbackController.text),
                child: const Text('Enviar'),
              ),
            ],
          ),
    );
  }

  // üì§ Enviar feedback a Firestore
  Future<void> _submitFeedback(String feedback) async {
    if (feedback
        .trim()
        .isEmpty) {
      _showErrorSnackBar('Por favor escribe tu comentario');
      return;
    }

    try {
      final authProvider = context.read<RestauAuthProvider>();

      await FirebaseFirestore.instance.collection('feedback').add({
        'userId': authProvider.user?.uid,
        'userEmail': authProvider.user?.email,
        'companyId': authProvider.companyId,
        'feedback': feedback.trim(),
        'timestamp': FieldValue.serverTimestamp(),
        'status': 'pending',
      });

      if (mounted) {
        Navigator.pop(context);
        _showSuccessSnackBar('‚úÖ ¬°Gracias por tu comentario!');
      }
    } catch (e) {
      if (mounted) {
        _showErrorSnackBar('‚ùå Error al enviar comentario: $e');
      }
    }
  }

  // ‚ÑπÔ∏è Mostrar informaci√≥n de la app
  void _showAboutDialog() async {
    final packageInfo = await PackageInfo.fromPlatform();

    if (mounted) {
      showDialog(
        context: context,
        builder: (context) =>
            AlertDialog(
              title: const Text('Acerca de MiProveedor'),
              content: Column(
                mainAxisSize: MainAxisSize.min,
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    children: [
                      Container(
                        padding: const EdgeInsets.all(12),
                        decoration: BoxDecoration(
                          gradient: AppGradients.primaryGradient,
                          borderRadius: BorderRadius.circular(12),
                        ),
                        child: const Icon(
                            Icons.restaurant, color: Colors.white, size: 32),
                      ),
                      const SizedBox(width: 16),
                      Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          const Text(
                            'MiProveedor',
                            style: TextStyle(
                                fontSize: 18, fontWeight: FontWeight.bold),
                          ),
                          Text('Versi√≥n ${packageInfo.version}'),
                        ],
                      ),
                    ],
                  ),
                  const SizedBox(height: 20),
                  const Text(
                      'üçΩÔ∏è Gesti√≥n inteligente de pedidos para restaurantes'),
                  const SizedBox(height: 12),
                  const Text('üì± Desarrollado por MobilePro'),
                  const SizedBox(height: 12),
                  const Text('¬© 2024 Todos los derechos reservados'),
                ],
              ),
              actions: [
                ElevatedButton(
                  onPressed: () => Navigator.pop(context),
                  child: const Text('Cerrar'),
                ),
              ],
            ),
      );
    }
  }

  // üìÑ Mostrar t√©rminos y condiciones
  void _showTermsAndConditions() {
    showDialog(
      context: context,
      builder: (context) =>
          AlertDialog(
            title: const Text('T√©rminos y Condiciones'),
            content: const SingleChildScrollView(
              child: Text(
                'T√âRMINOS Y CONDICIONES DE USO\n\n'
                    '1. ACEPTACI√ìN DE LOS T√âRMINOS\n'
                    'Al utilizar MiProveedor, aceptas estos t√©rminos.\n\n'
                    '2. DESCRIPCI√ìN DEL SERVICIO\n'
                    'MiProveedor es una aplicaci√≥n para gesti√≥n de pedidos a proveedores.\n\n'
                    '3. RESPONSABILIDADES DEL USUARIO\n'
                    '- Proporcionar informaci√≥n veraz\n'
                    '- Mantener segura tu cuenta\n'
                    '- Usar el servicio de manera apropiada\n\n'
                    '4. LIMITACIONES\n'
                    'El servicio se proporciona "tal como est√°".\n\n'
                    '5. MODIFICACIONES\n'
                    'Nos reservamos el derecho de modificar estos t√©rminos.',
              ),
            ),
            actions: [
              ElevatedButton(
                onPressed: () => Navigator.pop(context),
                child: const Text('Cerrar'),
              ),
            ],
          ),
    );
  }

  // üîí Mostrar pol√≠tica de privacidad
  void _showPrivacyPolicy() {
    showDialog(
      context: context,
      builder: (context) =>
          AlertDialog(
            title: const Text('Pol√≠tica de Privacidad'),
            content: const SingleChildScrollView(
              child: Text(
                'POL√çTICA DE PRIVACIDAD\n\n'
                    '1. INFORMACI√ìN QUE RECOPILAMOS\n'
                    '- Datos de registro (email, nombre)\n'
                    '- Informaci√≥n de empresa y empleados\n'
                    '- Datos de pedidos y proveedores\n\n'
                    '2. C√ìMO USAMOS TU INFORMACI√ìN\n'
                    '- Proporcionar el servicio\n'
                    '- Mejorar la experiencia\n'
                    '- Comunicarnos contigo\n\n'
                    '3. PROTECCI√ìN DE DATOS\n'
                    '- Encriptaci√≥n en tr√°nsito y reposo\n'
                    '- Acceso restringido\n'
                    '- Servidores seguros\n\n'
                    '4. TUS DERECHOS\n'
                    '- Acceder a tus datos\n'
                    '- Corregir informaci√≥n\n'
                    '- Eliminar cuenta\n\n'
                    '5. CONTACTO\n'
                    'privacidad@Mi-Proveedor.com',
              ),
            ),
            actions: [
              ElevatedButton(
                onPressed: () => Navigator.pop(context),
                child: const Text('Cerrar'),
              ),
            ],
          ),
    );
  }

  // ‚≠ê Calificar app - VERSI√ìN FUNCIONAL
  void _rateApp() async {
    try {
      // URLs de las stores (necesitas cambiar por las URLs reales cuando publiques)
      const String appStoreUrl = 'https://apps.apple.com/app/restau-pedidos/id123456789';
      const String playStoreUrl = 'https://play.google.com/store/apps/details?id=com.mobilepro.restau_pedidos';

      // Detectar plataforma y abrir store correspondiente
      String storeUrl;
      if (Theme
          .of(context)
          .platform == TargetPlatform.iOS) {
        storeUrl = appStoreUrl;
      } else {
        storeUrl = playStoreUrl;
      }

      final Uri url = Uri.parse(storeUrl);

      if (await canLaunchUrl(url)) {
        await launchUrl(
          url,
          mode: LaunchMode.externalApplication, // Abre en app de store
        );
      } else {
        // Fallback: mostrar di√°logo explicativo
        _showRatingFallbackDialog();
      }
    } catch (e) {
      _showErrorSnackBar('‚ùå Error al abrir la tienda: $e');
    }
  }

// Di√°logo alternativo si no puede abrir stores
  void _showRatingFallbackDialog() {
    showDialog(
      context: context,
      builder: (context) =>
          AlertDialog(
            title: const Text('Calificar MiProveedor'),
            content: const Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                Text('Para calificar la app:'),
                SizedBox(height: 16),
                Text('üì± iOS: Busca "MiProveedor" en App Store'),
                Text('ü§ñ Android: Busca "MiProveedor" en Play Store'),
                SizedBox(height: 16),
                Text('‚≠ê ¬°Tu calificaci√≥n nos ayuda mucho!'),
              ],
            ),
            actions: [
              ElevatedButton(
                onPressed: () => Navigator.pop(context),
                child: const Text('Entendido'),
              ),
            ],
          ),
    );
  }

  // ‚ùì Mostrar di√°logo de ayuda r√°pida
  void _showHelpDialog(BuildContext context) {
    showDialog(
      context: context,
      builder: (context) =>
          AlertDialog(
            title: const Row(
              children: [
                Icon(Icons.help, color: AppTheme.primaryColor),
                SizedBox(width: 8),
                Text('Ayuda R√°pida'),
              ],
            ),
            content: const Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text('üí° Consejos r√°pidos:',
                    style: TextStyle(fontWeight: FontWeight.bold)),
                SizedBox(height: 8),
                Text('‚Ä¢ Edita tu informaci√≥n de empresa tocando el √≠cono ‚úèÔ∏è'),
                Text('‚Ä¢ Configura notificaciones seg√∫n tus preferencias'),
                Text('‚Ä¢ Cambia tu contrase√±a regularmente'),
                Text('‚Ä¢ Comparte el c√≥digo de empresa con empleados'),
                SizedBox(height: 12),
                Text(
                    '¬øNecesitas m√°s ayuda? Usa "Contactar Soporte" m√°s abajo.'),
              ],
            ),
            actions: [
              ElevatedButton(
                onPressed: () => Navigator.pop(context),
                child: const Text('Entendido'),
              ),
            ],
          ),
    );
  }

  // üö™ Confirmaci√≥n de cierre de sesi√≥n
  void _showLogoutConfirmation(BuildContext context,
      RestauAuthProvider authProvider) {
    showDialog(
      context: context,
      builder: (context) =>
          AlertDialog(
            title: const Text('Cerrar Sesi√≥n'),
            content: const Text('¬øEst√°s seguro de que quieres cerrar sesi√≥n?'),
            actions: [
              TextButton(
                onPressed: () => Navigator.pop(context),
                child: const Text('Cancelar'),
              ),
              ElevatedButton(
                onPressed: () async {
                  Navigator.pop(context); // Cerrar di√°logo primero

                  try {
                    // Logout sin mostrar loading extra
                    await authProvider.logout();

                    // La navegaci√≥n la debe manejar el AuthProvider autom√°ticamente
                    // No necesitamos hacer nada m√°s aqu√≠

                  } catch (e) {
                    if (context.mounted) {
                      ScaffoldMessenger.of(context).showSnackBar(
                        SnackBar(
                          content: Text('Error al cerrar sesi√≥n: $e'),
                          backgroundColor: AppTheme.errorColor,
                        ),
                      );
                    }
                  }
                },
                style: ElevatedButton.styleFrom(
                    backgroundColor: AppTheme.errorColor),
                child: const Text(
                    'Cerrar Sesi√≥n', style: TextStyle(color: Colors.white)),
              ),
            ],
          ),
    );
  }

  // üíæ FUNCIONES DE PERSISTENCIA LOCAL

  // Cargar configuraciones de notificaciones
  void _loadNotificationSettings() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      setState(() {
        _pushNotifications = prefs.getBool('push_notifications') ?? true;
        _emailNotifications = prefs.getBool('email_notifications') ?? true;
        _orderNotifications = prefs.getBool('order_notifications') ?? true;
        _employeeNotifications =
            prefs.getBool('employee_notifications') ?? true;
      });
    } catch (e) {
      debugPrint('Error loading notification settings: $e');
    }
  }

  // Guardar configuraciones de notificaciones
  void _saveNotificationSettings() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setBool('push_notifications', _pushNotifications);
      await prefs.setBool('email_notifications', _emailNotifications);
      await prefs.setBool('order_notifications', _orderNotifications);
      await prefs.setBool('employee_notifications', _employeeNotifications);
    } catch (e) {
      debugPrint('Error saving notification settings: $e');
    }
  }

  // üåç Mostrar di√°logo de idioma (5 IDIOMAS COMPLETOS)
  void _showLanguageDialog() {
    final localizationProvider = context.read<LocalizationProvider>();

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Row(
          children: [
            Icon(Icons.language, color: AppTheme.primaryColor),
            SizedBox(width: 8),
            Text('Seleccionar Idioma'),
          ],
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            // üá™üá∏ ESPA√ëOL
            RadioListTile<String>(
              title: Text('üá™üá∏ Espa√±ol'),
              subtitle: Text('Espa√±ol'),
              value: 'es',
              groupValue: localizationProvider.currentLanguageCode,
              onChanged: (value) async {
                Navigator.pop(context);
                await localizationProvider.setLocale(Locale(value!));
                _showSuccessSnackBar('üåç Idioma cambiado a Espa√±ol');
              },
              activeColor: AppTheme.primaryColor,
            ),

            // üá∫üá∏ INGL√âS
            RadioListTile<String>(
              title: Text('üá∫üá∏ English'),
              subtitle: Text('English'),
              value: 'en',
              groupValue: localizationProvider.currentLanguageCode,
              onChanged: (value) async {
                Navigator.pop(context);
                await localizationProvider.setLocale(Locale(value!));
                _showSuccessSnackBar('üåç Language changed to English');
              },
              activeColor: AppTheme.primaryColor,
            ),

            // üè¥Û†Å•Û†Å≥Û†Å£Û†Å¥Û†Åø CATAL√ÅN
            RadioListTile<String>(
              title: Text('üè¥Û†Å•Û†Å≥Û†Å£Û†Å¥Û†Åø Catal√†'),
              subtitle: Text('Catal√†'),
              value: 'ca',
              groupValue: localizationProvider.currentLanguageCode,
              onChanged: (value) async {
                Navigator.pop(context);
                await localizationProvider.setLocale(Locale(value!));
                _showSuccessSnackBar('üåç Idioma canviat a Catal√†');
              },
              activeColor: AppTheme.primaryColor,
            ),

            // üá´üá∑ FRANC√âS
            RadioListTile<String>(
              title: Text('üá´üá∑ Fran√ßais'),
              subtitle: Text('Fran√ßais'),
              value: 'fr',
              groupValue: localizationProvider.currentLanguageCode,
              onChanged: (value) async {
                Navigator.pop(context);
                await localizationProvider.setLocale(Locale(value!));
                _showSuccessSnackBar('üåç Langue chang√©e en Fran√ßais');
              },
              activeColor: AppTheme.primaryColor,
            ),

            // üáÆüáπ ITALIANO
            RadioListTile<String>(
              title: Text('üáÆüáπ Italiano'),
              subtitle: Text('Italiano'),
              value: 'it',
              groupValue: localizationProvider.currentLanguageCode,
              onChanged: (value) async {
                Navigator.pop(context);
                await localizationProvider.setLocale(Locale(value!));
                _showSuccessSnackBar('üåç Lingua cambiata in Italiano');
              },
              activeColor: AppTheme.primaryColor,
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('Cancelar'),
          ),
          ElevatedButton.icon(
            onPressed: () async {
              Navigator.pop(context);
              await localizationProvider.resetToDeviceLanguage();
              _showSuccessSnackBar('üîÑ Idioma reseteado a configuraci√≥n del dispositivo');
            },
            icon: Icon(Icons.refresh),
            label: Text('Auto'),
            style: ElevatedButton.styleFrom(
              backgroundColor: AppTheme.primaryColor,
              foregroundColor: Colors.white,
            ),
          ),
        ],
      ),
    );
  }



  // üìù Mostrar di√°logo de tama√±o de texto (FUNCIONAL)
  void _showTextSizeDialog(UISettingsProvider uiSettings) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Tama√±o de Texto'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            RadioListTile<double>(
              title: Text(
                'Peque√±o',
                style: TextStyle(fontSize: 16 * 0.8),
              ),
              value: 0.8,
              groupValue: uiSettings.textScale,
              onChanged: (value) {
                Navigator.pop(context);
                uiSettings.setTextScale(value!);
                _showSuccessSnackBar('üìù Tama√±o cambiado a Peque√±o');
              },
              activeColor: AppTheme.primaryColor,
            ),
            RadioListTile<double>(
              title: Text(
                'Normal',
                style: TextStyle(fontSize: 16 * 1.0),
              ),
              value: 1.0,
              groupValue: uiSettings.textScale,
              onChanged: (value) {
                Navigator.pop(context);
                uiSettings.setTextScale(value!);
                _showSuccessSnackBar('üìù Tama√±o cambiado a Normal');
              },
              activeColor: AppTheme.primaryColor,
            ),
            RadioListTile<double>(
              title: Text(
                'Grande',
                style: TextStyle(fontSize: 16 * 1.2),
              ),
              value: 1.2,
              groupValue: uiSettings.textScale,
              onChanged: (value) {
                Navigator.pop(context);
                uiSettings.setTextScale(value!);
                _showSuccessSnackBar('üìù Tama√±o cambiado a Grande');
              },
              activeColor: AppTheme.primaryColor,
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Cerrar'),
          ),
        ],
      ),
    );
  }

  // üëÜ Mostrar opciones biom√©tricas (VERSI√ìN COMPLETA Y MEJORADA)
  void _showBiometricOptions(UISettingsProvider uiSettings) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Row(
          children: [
            Icon(Icons.fingerprint, color: AppTheme.primaryColor),
            SizedBox(width: 8),
            Text('Autenticaci√≥n Biom√©trica'),
          ],
        ),
        content: SingleChildScrollView(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Estado actual
              Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: uiSettings.isBiometricAvailable
                      ? AppTheme.successColor.withOpacity(0.1)
                      : Colors.orange.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(
                    color: uiSettings.isBiometricAvailable
                        ? AppTheme.successColor
                        : Colors.orange,
                    width: 1,
                  ),
                ),
                child: Row(
                  children: [
                    Icon(
                      uiSettings.isBiometricAvailable
                          ? Icons.check_circle
                          : Icons.warning,
                      color: uiSettings.isBiometricAvailable
                          ? AppTheme.successColor
                          : Colors.orange,
                    ),
                    const SizedBox(width: 8),
                    Expanded(
                      child: Text(
                        'Estado: ${uiSettings.biometricStatusText}',
                        style: TextStyle(
                          fontWeight: FontWeight.w600,
                          color: uiSettings.isBiometricAvailable
                              ? AppTheme.successColor
                              : Colors.orange,
                        ),
                      ),
                    ),
                  ],
                ),
              ),

              const SizedBox(height: 16),

              // Informaci√≥n seg√∫n disponibilidad
              if (uiSettings.isBiometricAvailable) ...[
                const Text(
                  'üîê La autenticaci√≥n biom√©trica te permite:',
                  style: TextStyle(fontWeight: FontWeight.w600),
                ),
                const SizedBox(height: 8),
                const Text('‚Ä¢ Acceso r√°pido y seguro'),
                const Text('‚Ä¢ No necesitas recordar tu contrase√±a'),
                const Text('‚Ä¢ Mayor seguridad para tu cuenta'),
                const Text('‚Ä¢ Experiencia m√°s fluida'),
                const SizedBox(height: 16),

                // Tipos de biometr√≠a detectados
                Container(
                  padding: const EdgeInsets.all(12),
                  decoration: BoxDecoration(
                    color: AppTheme.primaryColor.withOpacity(0.05),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      const Text(
                        'M√©todos disponibles:',
                        style: TextStyle(
                          fontWeight: FontWeight.w600,
                          color: AppTheme.primaryColor,
                        ),
                      ),
                      const SizedBox(height: 4),
                      // Aqu√≠ podr√≠as mostrar qu√© tipos espec√≠ficos est√°n disponibles
                      Text(
                        '${_getBiometricTypesText()}',
                        style: const TextStyle(fontSize: 12),
                      ),
                    ],
                  ),
                ),

              ] else ...[
                const Text(
                  '‚ö†Ô∏è La autenticaci√≥n biom√©trica no est√° disponible',
                  style: TextStyle(
                    fontWeight: FontWeight.w600,
                    color: Colors.orange,
                  ),
                ),
                const SizedBox(height: 12),
                const Text('Posibles causas:'),
                const SizedBox(height: 8),
                const Text('‚Ä¢ No tienes huellas dactilares o rostro configurados'),
                const Text('‚Ä¢ El dispositivo no tiene sensor biom√©trico'),
                const Text('‚Ä¢ La funci√≥n est√° deshabilitada en ajustes del sistema'),
                const Text('‚Ä¢ Necesitas configurar un m√©todo de bloqueo de pantalla'),
                const SizedBox(height: 16),

                // Instrucciones para habilitar
                Container(
                  padding: const EdgeInsets.all(12),
                  decoration: BoxDecoration(
                    color: Colors.blue.withOpacity(0.05),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: const Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        'üí° Para habilitar:',
                        style: TextStyle(
                          fontWeight: FontWeight.w600,
                          color: Colors.blue,
                        ),
                      ),
                      SizedBox(height: 4),
                      Text(
                        '1. Ve a Ajustes del dispositivo\n'
                            '2. Busca "Seguridad" o "Biometr√≠a"\n'
                            '3. Configura huella dactilar o reconocimiento facial\n'
                            '4. Regresa a la app e intenta de nuevo',
                        style: TextStyle(fontSize: 12),
                      ),
                    ],
                  ),
                ),
              ],

              const SizedBox(height: 16),

              // Nota de seguridad
              Container(
                padding: const EdgeInsets.all(10),
                decoration: BoxDecoration(
                  color: Colors.grey.withOpacity(0.05),
                  borderRadius: BorderRadius.circular(6),
                ),
                child: const Row(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Icon(Icons.security, size: 16, color: Colors.grey),
                    SizedBox(width: 8),
                    Expanded(
                      child: Text(
                        'Nota: Los datos biom√©tricos se almacenan de forma segura en tu dispositivo y nunca se env√≠an a nuestros servidores.',
                        style: TextStyle(
                          fontSize: 11,
                          color: Colors.grey,
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Cerrar'),
          ),
          if (uiSettings.isBiometricAvailable)
            ElevatedButton.icon(
              onPressed: () async {
                Navigator.pop(context);

                // Mostrar loading
                showDialog(
                  context: context,
                  barrierDismissible: false,
                  builder: (context) => const Center(
                    child: CircularProgressIndicator(),
                  ),
                );

                try {
                  final success = await uiSettings.toggleBiometric();

                  // Cerrar loading
                  if (mounted) Navigator.pop(context);

                  // Mostrar resultado
                  if (success) {
                    final message = uiSettings.isBiometricEnabled
                        ? 'üîê Autenticaci√≥n biom√©trica activada correctamente'
                        : 'üîì Autenticaci√≥n biom√©trica desactivada';
                    _showSuccessSnackBar(message);
                  } else {
                    _showErrorSnackBar('‚ùå Error al cambiar configuraci√≥n biom√©trica');
                  }
                } catch (e) {
                  // Cerrar loading
                  if (mounted) Navigator.pop(context);
                  _showErrorSnackBar('‚ùå Error: $e');
                }
              },
              icon: Icon(
                uiSettings.isBiometricEnabled
                    ? Icons.fingerprint_outlined
                    : Icons.fingerprint,
              ),
              label: Text(
                uiSettings.isBiometricEnabled ? 'Desactivar' : 'Activar',
              ),
              style: ElevatedButton.styleFrom(
                backgroundColor: uiSettings.isBiometricEnabled
                    ? Colors.orange
                    : AppTheme.primaryColor,
                foregroundColor: Colors.white,
              ),
            ),
        ],
      ),
    );
  }
  // üîç Funci√≥n auxiliar para obtener tipos de biometr√≠a
  String _getBiometricTypesText() {
    // Aqu√≠ podr√≠as implementar l√≥gica para detectar tipos espec√≠ficos
    // Por ahora, retornamos un texto gen√©rico
    return 'Huella dactilar, reconocimiento facial o iris (seg√∫n disponibilidad del dispositivo)';
  }

  // üì± UTILIDADES PARA SNACKBARS MEJORADAS
  void _showSuccessSnackBar(String message) {
    if (mounted) {
      // Limpiar SnackBars anteriores para evitar acumulaci√≥n
      ScaffoldMessenger.of(context).clearSnackBars();

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Row(
            children: [
              const Icon(Icons.check_circle, color: Colors.white),
              const SizedBox(width: 8),
              Expanded(child: Text(message)),
            ],
          ),
          backgroundColor: AppTheme.successColor,
          behavior: SnackBarBehavior.floating,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(10),
          ),
          duration: const Duration(milliseconds: 1500),
          // ‚Üê M√°s r√°pido (1.5s)
          dismissDirection: DismissDirection.horizontal, // ‚Üê Swipe para cerrar
        ),
      );
    }
  }

  void _showErrorSnackBar(String message) {
    if (mounted) {
      // Limpiar SnackBars anteriores para evitar acumulaci√≥n
      ScaffoldMessenger.of(context).clearSnackBars();

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Row(
            children: [
              const Icon(Icons.error, color: Colors.white),
              const SizedBox(width: 8),
              Expanded(child: Text(message)),
            ],
          ),
          backgroundColor: AppTheme.errorColor,
          behavior: SnackBarBehavior.floating,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(10),
          ),
          duration: const Duration(milliseconds: 2000),
          // ‚Üê M√°s r√°pido (2s)
          dismissDirection: DismissDirection.horizontal,
          // ‚Üê Swipe para cerrar
          action: SnackBarAction( // ‚Üê Bot√≥n para cerrar inmediatamente
            label: 'OK',
            textColor: Colors.white,
            onPressed: () {
              ScaffoldMessenger.of(context).hideCurrentSnackBar();
            },
          ),
        ),
      );
    }
  }
}
