# üì± PODFILE OPTIMIZADO PARA MIPROVEEDOR
# Configuraci√≥n profesional para Flutter + Firebase + Biom√©trica

# Versi√≥n m√≠nima iOS (compatible con todas las funcionalidades)
platform :ios, '12.0'

# Configuraciones importantes
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

# Permitir CocoaPods verificar el proyecto
project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_ios_podfile_setup

target 'Runner' do
  use_frameworks!
  use_modular_headers!

  # üî• FLUTTER PODS (AUTOM√ÅTICO)
  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
  
  # üî• FIREBASE PODS ESPEC√çFICOS (para optimizaci√≥n)
  pod 'Firebase/Core'
  pod 'Firebase/Auth'
  pod 'Firebase/Firestore'
  pod 'Firebase/Storage'
  pod 'Firebase/Messaging'
  pod 'Firebase/Analytics'
  pod 'Firebase/Crashlytics'
  pod 'Firebase/AppCheck'
  
  # üîê AUTENTICACI√ìN BIOM√âTRICA
  pod 'LocalAuthentication'
  
  # üîî NOTIFICACIONES
  pod 'UserNotifications'
  
  target 'RunnerTests' do
    inherit! :search_paths
  end
end

# üì± CONFIGURACIONES POST-INSTALACI√ìN
post_install do |installer|
  installer.pods_project.targets.each do |target|
    flutter_additional_ios_build_settings(target)
    
    # üéØ CONFIGURAR DEPLOYMENT TARGET
    target.build_configurations.each do |config|
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '12.0'
      config.build_settings['ENABLE_BITCODE'] = 'NO'
      
      # üîß OPTIMIZACIONES PARA SWIFT
      if target.respond_to?(:product_type) and target.product_type == "com.apple.product-type.bundle"
        target.build_configurations.each do |config|
          config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
        end
      end
      
      # üöÄ OPTIMIZACIONES DE RENDIMIENTO
      config.build_settings['GCC_OPTIMIZATION_LEVEL'] = '0'
      config.build_settings['SWIFT_OPTIMIZATION_LEVEL'] = '-Onone'
      
      # üîí CONFIGURACIONES DE SEGURIDAD
      config.build_settings['VALIDATE_PRODUCT'] = 'YES'
      config.build_settings['ONLY_ACTIVE_ARCH'] = 'YES'
      
      # üì± SOPORTE PARA NUEVAS VERSIONES iOS
      if config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'].to_f < 12.0
        config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '12.0'
      end
    end
  end
  
  # üîÑ CONFIGURAR PODS ESPEC√çFICOS
  installer.pods_project.targets.each do |target|
    case target.name
    when 'FMDB'
      target.build_configurations.each do |config|
        config.build_settings['CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF'] = 'NO'
      end
    when 'nanopb'
      target.build_configurations.each do |config|
        config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= [
          '$(inherited)',
          'PB_FIELD_32BIT=1',
          'PB_NO_PACKED_STRUCTS=1',
          'PB_ENABLE_MALLOC=1',
        ]
      end
    end
  end
  
  # ‚úÖ MENSAJE DE √âXITO
  puts "\nüéâ ¬°Pods instalados correctamente para MiProveedor!"
  puts "üì± Soporte para iOS 12.0+"
  puts "üî• Firebase completamente configurado"
  puts "üîê Autenticaci√≥n biom√©trica lista"
  puts "üîî Notificaciones push configuradas"
  puts "\n‚úÖ Proyecto listo para desarrollo iOS\n"
end
