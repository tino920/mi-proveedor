# 🚀 GITHUB ACTIONS - BUILD iOS AUTOMÁTICO - MiProveedor
# Configurado por MobilePro para desarrollo sin Mac - ROLLBACK STABLE

name: 🍎 iOS Build - MiProveedor

on:
  push:
    branches: [ main, develop, ios-* ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Permite ejecutar manualmente desde GitHub

env:
  FLUTTER_VERSION: '3.24.3'
  JAVA_VERSION: '17'

jobs:
  # 🧪 JOB 1: ANÁLISIS Y TESTS
  analyze:
    name: 🔍 Análisis de Código
    runs-on: ubuntu-latest
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 🐦 Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        
    - name: 📦 Dependencies
      run: flutter pub get
      
    - name: 🔍 Analyze
      run: flutter analyze --no-fatal-infos || echo "⚠️ Analyzer completado con warnings, continuando build..."
      
    - name: 🧪 Tests
      run: flutter test --coverage || echo "📝 No tests found, skipping..."
      
    - name: 📊 Upload Coverage
      uses: codecov/codecov-action@v4
      if: success()
      with:
        file: coverage/lcov.info

  # 📱 JOB 2: BUILD iOS
  build-ios:
    name: 🍎 Build iOS
    runs-on: macos-latest
    needs: analyze
    
    steps:
    # 📥 1. Checkout del código
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    # 🍎 2. Setup Xcode 15.x (Stable para Firebase Swift 5.x compatibility)
    - name: 🍎 Setup Xcode 15.x for Firebase Swift 5.x Compatibility
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.4'
        
    # ☕ 3. Setup Java (necesario para Flutter)
    - name: ☕ Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: ${{ env.JAVA_VERSION }}
        
    # 🐦 4. Setup Flutter
    - name: 🐦 Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        
    # 📦 5. Install dependencies
    - name: 📦 Flutter Pub Get
      run: flutter pub get
      
    # 🔧 6. Flutter Clean + Force Firebase Swift 5.x Versions
    - name: 🔧 Flutter Clean + Force Firebase Swift 5.x
      run: |
        echo "🔧 Limpiando proyecto completamente para Firebase Swift 5.x..."
        flutter clean
        
        echo "🗑️ Eliminando locks para forzar versiones específicas:"
        rm -f pubspec.lock
        rm -f ios/Podfile.lock
        rm -rf ios/Pods/
        rm -rf build/
        
        echo "📦 Reinstalando dependencies con versiones Firebase Swift 5.x:"
        flutter pub get
        
        echo "🔍 Configurando environment para GitHub Actions:"
        # Fix common GitHub Actions iOS issues
        export COCOAPODS_DISABLE_STATS=true
        export FLUTTER_BUILD_MODE=release
        # Ensure proper permissions
        chmod +x ios/Runner.xcodeproj/
        # Create required directories
        mkdir -p ios/Runner.xcworkspace/
        mkdir -p build/ios/iphoneos/
        
        echo "Environment configurado para CI builds con Firebase Swift 5.x"
        echo "Verificando versiones Flutter dependencies:"
        flutter pub deps | grep firebase
      
    # 🍎 7. Setup iOS dependencies + CocoaPods Integration Fix
    - name: 🍎 Install CocoaPods + Integration Fix
      run: |
        cd ios
        # Limpiar pods anteriores
        pod deintegrate 2>/dev/null || true
        rm -rf Pods/ Podfile.lock
        # Instalar fresh
        pod install --repo-update
        
        echo "🔧 Aplicando CocoaPods integration fix..."
        chmod +x ../scripts/setup_cocoapods_integration.sh
        ../scripts/setup_cocoapods_integration.sh
        
        echo "✅ CocoaPods integration completed"
        
    # 🔍 8. Verificar configuración iOS
    - name: 🔍 Verify iOS Setup
      run: |
        echo "🔍 Verificando configuración iOS..."
        ls -la ios/Runner/
        if [ -f "ios/Runner/GoogleService-Info.plist" ]; then
          echo "✅ GoogleService-Info.plist encontrado"
        else
          echo "⚠️ ADVERTENCIA: GoogleService-Info.plist NO encontrado"
          echo "📋 Para apps con Firebase, añádelo a ios/Runner/"
        fi
        
    # 📱 9. Build iOS App (sin code signing + verbose logging)
    - name: 📱 Build iOS App
      run: |
        echo "🔨 Iniciando build iOS con logging detallado..."
        echo "🔍 Verificando estado pre-build:"
        ls -la ios/
        echo "🔍 Verificando Podfile.lock:"
        cat ios/Podfile.lock | head -20
        echo "🔍 Verificando workspace:"
        ls -la ios/Runner.xcworkspace/
        
        echo "🛠️ Configurando environment para GitHub Actions:"
        export FLUTTER_BUILD_MODE=release
        export COCOAPODS_DISABLE_STATS=true
        
        echo "🔨 Ejecutando flutter build ios con verbose logging:"
        flutter build ios --release --no-codesign --verbose --dart-define=GITHUB_ACTIONS=true
        
        echo "✅ Build completado - verificando outputs:"
        ls -la build/ios/iphoneos/
        echo "Build status: $?"
        
        if [ $? -eq 0 ]; then
          echo "✅ ÉXITO: Build iOS completado exitosamente"
        else
          echo "❌ ERROR: Build iOS falló - capturando información debug:"
          echo "Flutter doctor:"
          flutter doctor -v
          echo "Xcode version:"
          xcodebuild -version
          echo "Available SDKs:"
          xcodebuild -showsdks
          echo "Pods status:"
          cd ios && pod --version && cd ..
          exit 1
        fi
        
    # 📦 10. Create IPA (sin signing para distribución)
    - name: 📦 Create IPA Archive
      run: |
        echo "📦 Creando archivo IPA..."
        cd build/ios/iphoneos
        
        # Crear estructura IPA
        mkdir -p Payload
        cp -r Runner.app Payload/
        
        # Información del build
        BUILD_NUMBER=${{ github.run_number }}
        DATE=$(date '+%Y%m%d_%H%M')
        IPA_NAME="MiProveedor-iOS-${BUILD_NUMBER}-${DATE}.ipa"
        
        # Crear IPA
        zip -r "${IPA_NAME}" Payload/
        
        # Info
        echo "📱 IPA creado: ${IPA_NAME}"
        ls -lh "${IPA_NAME}"
        
        # Mover a directorio accesible
        mv "${IPA_NAME}" ../../../
        
        echo "✅ IPA listo para descarga"
        
    # ⬆️ 11. Upload IPA como Artifact
    - name: ⬆️ Upload IPA Artifact
      uses: actions/upload-artifact@v4
      with:
        name: MiProveedor-iOS-Build-${{ github.run_number }}
        path: MiProveedor-iOS-*.ipa
        retention-days: 30
        
    # 📊 12. Build Summary
    - name: 📊 Build Summary
      run: |
        echo "🎉 BUILD COMPLETADO EXITOSAMENTE!"
        echo "=================================="
        echo "📱 Proyecto: MiProveedor"
        echo "🔨 Build #${{ github.run_number }}"
        echo "📅 Fecha: $(date)"
        echo "🍎 Plataforma: iOS"
        echo "📦 Archivo: MiProveedor-iOS-${{ github.run_number }}-*.ipa"
        echo ""
        echo "📥 CÓMO DESCARGAR:"
        echo "1. Ve a la pestaña 'Actions' de tu repositorio"
        echo "2. Haz clic en este workflow run"
        echo "3. Descarga el artifact 'MiProveedor-iOS-Build-${{ github.run_number }}'"
        echo ""
        echo "⚠️  NOTA IMPORTANTE:"
        echo "El archivo .ipa NO está firmado (code signed)"
        echo "Para instalar en dispositivo real necesitas:"
        echo "- Abrir en Xcode y firmar con tu Apple Developer Account"
        echo "- O usar herramientas como Diawi para distribución"
        echo ""
        echo "🚀 ¡Tu app está lista para iOS!"
        echo "   Desarrollado por MobilePro ✨"
        
    # 🔔 13. Notificación de éxito (opcional)
    - name: 🔔 Success Notification
      if: success()
      run: |
        echo "✅ ÉXITO: Build iOS completado sin errores"
        
    # ❌ 14. Notificación de error (opcional)  
    - name: ❌ Error Notification
      if: failure()
      run: |
        echo "❌ ERROR: El build iOS falló"
        echo "🔍 Revisa los logs anteriores para detalles"
        echo "💡 Problemas comunes:"
        echo "   - Dependencias en pubspec.yaml"
        echo "   - Configuración Firebase"
        echo "   - Errores de sintaxis Dart"

# 🎯 CONFIGURACIÓN ADICIONAL
# Para builds con code signing (Apple Developer Account):
# 1. Ve a Settings > Secrets and Variables > Actions
# 2. Añade estos secrets:
#    - IOS_CERTIFICATE_BASE64
#    - IOS_CERTIFICATE_PASSWORD  
#    - IOS_PROVISIONING_PROFILE_BASE64
#    - KEYCHAIN_PASSWORD
